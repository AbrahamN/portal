<%
# Copyright (c) 2012-2013 Cardiff University, UK.
# Copyright (c) 2012-2013 The University of Manchester, UK.
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the names of The University of Manchester nor Cardiff University nor
#   the names of its contributors may be used to endorse or promote products
#   derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Authors
#     Abraham Nieva de la Hidalga
#
# Synopsis
#
# BioVeL Taverna Lite  is a prototype interface to Taverna Server which is
# provided to support easy inspection and execution of workflows.
#
# For more details see http://www.biovel.eu
#
# BioVeL is funded by the European Commission 7th Framework Programme (FP7),
# through the grant agreement number 283359.
%>

<div id="runresults">
  <h3>Results</h3>
  <div id="tabs_results">
    <ul>
      <% for result in run.results.where('depth=0').order('name').each %>
      <li>
        <a href="#search_<%= result.name %>">
          <%= label_tag result.name %>
        </a>
      </li>
      <% end %>

      <% for result in run.results.where('depth <> 0').order('name').group('name').each %>
        <li>
          <a href="#search_<%= result.name %>">
            <%= label_tag result.name %>
          </a>
        </li>
      <% end %>
    </ul>

    <% for result in run.results.where('depth=0').order('name').each %>
      <div id="search_<%= result.name %>" class="clearfix"
      	style="min-height:300px; height:auto !important; height:300px;">

        <b><%= result.name %></b> (<%=h result.filetype.split(/-*/).join %>)

        <div class="download_button">
          <%= button_to 'Download', :controller => 'results',
            :action => 'download', :id => result.id %>
        </div>

        <% if !@sink_descriptions[result.name].nil? &&
          @sink_descriptions[result.name] != "" %>
          <div class="show_description">
            <b>Description</b>
            <%= simple_format(@sink_descriptions[result.name]) %>
          </div>
        <% end %>

        <div class="show_result">
          <% if result.filetype.to_s =~ /text/ %>
            <%= format_text_result(result) %>
          <% elsif result.filetype.to_s =~ /error/ %>
            <!-- Here is where errors should be handled -->
            <dl class='list_any'>
              <dt class='list_title'>Error:</dt>
              <dd class='list_description'>
                <%= @run_error_codes[result.name].error_name -%>
              </dd>
              <dt class='list_title'>Explanation:</dt>
              <dd class='list_description'>
                <%= @run_error_codes[result.name].error_message %>
              </dd>
              <dt class='list_title'>Text:</dt>
              <dd class='list_description'>
                <% error_text = IO.read(result.result_filename) %>
                <%= render :partial => 'partials/preview_and_detail',
                  :locals => { :content_label => result.name,
                  :content => error_text } %>
              </dd>
            </dl>
          <% else %>
            <%= image_tag result.result_filepath %>
          <% end %>
        </div>
      </div>
    <% end %>

    <% for result_g in run.results.where('depth <> 0').order('name').group('name').each %>
      <% result_group_name = result_g.name %>

      <div id="search_<%= result_group_name %>" class="clearfix"
      	style="min-height:300px; height:auto !important; height:300px;">

        <%if !@sink_descriptions[result_group_name].nil? &&
          @sink_descriptions[result_group_name] != "" %>
          <div class="show_description">
            <b>Description</b>
            <%= simple_format(@sink_descriptions[result_group_name]) %>
          </div>
        <% end %>

        <% for result in run.results.where('name=?', result_group_name).order('name,filepath').each %>
          <div class="show_result">
            <% if result.filetype.to_s =~ /text/ %>
              <%= format_text_result(result) %>
            <% elsif result.filetype.to_s =~ /error/ %>
              <%= simple_format(IO.read(result.result_filename))%>
            <% else %>
              <%= image_tag result.result_filepath %>
            <% end %>
          </div>
        <% end %>
      </div>
    <% end %>
  </div>
</div>
