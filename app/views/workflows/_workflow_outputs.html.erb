<%
# Copyright (c) 2012-2013 Cardiff University, UK.
# Copyright (c) 2012-2013 The University of Manchester, UK.
#
# All rights reserved.
#
# Redistribution and use in sink and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of sink code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the names of The University of Manchester nor Cardiff University nor
#   the names of its contributors may be used to endorse or promote products
#   derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Authors
#     Abraham Nieva de la Hidalga
#
# Synopsis
#
# BioVeL Taverna Lite  is a prototype interface to Taverna Server which is
# provided to support easy inspection and execution of workflows.
#
# For more details see http://www.biovel.eu
#
# BioVeL is funded by the European Commission 7th Framework Programme (FP7),
# through the grant agreement number 283359.
%>
<div id="wf_outputs" style="min-height:300px;
     			    height:auto !important;
                            height:300px; ">
<% if @sinks.count>0 %>
   <h2>
     This workflow has <%= @sinks.count %>
     <%= "Output".pluralize(@sinks.count)%>
   </h2>
   <% @custom_outputs.each do |item| %>
     <% portname = item.name %>
     <% example_value = @sinks[portname].blank? ? "": @sinks[portname] -%>
     <% the_description = @sink_descriptions[portname] %>
     <h3> <%= label_tag portname %></h3>
     <dl class='list_any'>
       <% unless the_description .blank? -%>
       <dt class='list_title'>Description:</dt>
       <dd class='list_description'>
         <%=@sink_descriptions[portname].blank? ? "Not Provided" : simple_format(the_description) -%>
       </dd>
       <% end -%>
       <% if item.id.nil? -%>
       <!-- If not customised show default view -->
         <% unless example_value.blank? -%>
         <dt class='list_title'>Example Value:</dt>
         <dd class='list_description'>
           <%= render :partial => 'partials/preview_and_detail',
             :locals => {:content_label => portname, :content => example_value } %>
         </dd>
         <% end -%>
       <% else -%>
       <!-- If customised show custom sample and/or file -->
        <% if item.sample_file_type.to_s =~ /text/
             file_uri = IO.read(item.sample_file_actual_path)
           else
             file_uri = ""
           end %>
         <% if (item.display_control_id == 1) || item.display_control_id == 2 then -%>
           <dt class='list_title'>Example Value:</dt>
           <dd class='list_description'>
             <%= render :partial => 'partials/preview_and_detail',
               :locals => {:content_label => portname, :content => item.example } %>
           </dd>
         <% end -%>
         <% if (item.display_control_id == 1) || item.display_control_id == 3 then -%>
           <dt class='list_title'>Example File:</dt>
           <dd class='list_description'>
          <% if item.sample_file_type.to_s =~ /text/ %>
            <% if file_uri  =~ URI::regexp -%>
              <% if active_link?(file_uri) %>
                <%= link_to(file_uri, file_uri)  -%>
              <% end %>
            <% else %>
              <%= render :partial => 'partials/preview_and_detail',
                    :locals => {:content_label => portname,
                    :content => IO.read(item.sample_file_actual_path)} %>
            <%end%>
          <% elsif item.sample_file_type.to_s =~ /image/ %>
          <div class="show_result">
             <%= image_tag item.sample_file_relative_path %>
          </div>
          <% else -%>
             <%= render :partial => 'partials/preview_and_detail',
              :locals => {:content_label => portname, :content => item.sample_file} %>
          <% end -%>
          <% unless file_uri  =~ URI::regexp %>
               <%= button_to 'Download', :controller => 'workflow_ports',
                     :action => 'download', :id => item.id %>
             <% end -%>
           </dd>
         <% end -%>
       <% end -%>
     </dl>
  <% end -%>

<% else %>
  <p>
    <b> This workflow has no outputs </b>
  </p>
<% end %>
</div>

